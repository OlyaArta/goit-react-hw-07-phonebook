{"version":3,"sources":["components/contactList/Contact.module.css","components/filter/Filter.module.css","components/container/Container.module.css","redux/phonebook-actions.js","redux/phonebook-reducer.js","redux/store.js","components/container/Container.js","redux/phonebook-selectors.js","components/form/Form.js","components/contactList/ContactItem.js","components/contactList/ContactList.js","components/filter/Filter.js","components/App.js","index.js","components/form/Form.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","changeFilter","deleteContact","items","createReducer","state","filter","contact","initialState","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blackList","store","configureStore","reducer","contacts","persistReducer","phonebookReducer","devTools","process","persistor","persistStore","Container","children","className","s","container","getFilter","getContacts","getVisibleContacts","normalizedFilter","toLowerCase","includes","Form","useSelector","dispatch","useDispatch","useState","setName","setNumber","nameInputId","shortid","generate","numberInputId","handleChange","e","currentTarget","value","reset","onSubmit","preventDefault","find","alert","phoneActions","form","htmlFor","label","type","pattern","title","required","onChange","input","btn","ContactItem","onDeleteContact","onClick","button","ContactList","actions","list","map","Filter","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,OAAS,0B,mBCAxDD,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,MAAQ,wB,mBCAxDD,EAAOC,QAAU,CAAC,UAAY,+B,+KCGjBC,EAAaC,YAAa,iBAAiB,SAACC,EAAMC,GAAP,MAAmB,CACzEC,QAAS,CACPC,GAAIC,cACJJ,OACAC,cAISI,EAAeN,YAAa,0BAC5BO,EAAgBP,YAAa,oBCRpCQ,EAAQC,YAAc,IAAD,mBACxBV,GAAa,SAACW,EAAD,OAAUP,EAAV,EAAUA,QAAV,4BAA4BO,GAA5B,CAAmCP,OADxB,cAExBI,GAAgB,SAACG,EAAD,OAAUP,EAAV,EAAUA,QAAV,OACfO,EAAMC,QAAO,SAACC,GAAD,OAAaA,EAAQR,KAAOD,QAHlB,IAMrBQ,EAASF,YAAc,GAAD,eACzBH,GAAe,SAACI,EAAD,YAAUP,YAQbU,EALMC,YAAgB,CACnCN,QACAG,W,iBCCII,EAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MAGIC,EAAgB,CACpBC,IAAK,WACLC,YACAC,UAAW,CAAC,WAGDC,EAAQC,YAAe,CAClCC,QAAS,CACPC,SAAUC,YAAeR,EAAeS,IAE1CpB,aACAqB,UAAUC,IAGCC,EAAYC,YAAaT,G,wBCnCvBU,MAJf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OAAO,qBAAKC,UAAWC,IAAEC,UAAlB,SAA8BH,K,yBCH1BI,EAAY,SAACnC,GAAD,OAAWA,EAAMuB,SAAStB,QACtCmC,EAAc,SAACpC,GAAD,OAAWA,EAAMuB,SAASzB,OAExCuC,EAAqB,SAACrC,GACjC,IAAMC,EAASkC,EAAUnC,GACnBuB,EAAWa,EAAYpC,GACvBsC,EAAmBrC,EAAOsC,cAEhC,OAAOhB,EAAStB,QAAO,SAACC,GAEtB,OAAOA,EAAQX,KAAKA,KAAKgD,cAAcC,SAASF,O,gBCqFrCG,MAtFf,WACE,IAAMlB,EAAWmB,YAAYN,GACvBO,EAAWC,cAIjB,EAAwBC,mBAAS,IAAjC,mBAAOtD,EAAP,KAAauD,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOrD,EAAP,KAAeuD,EAAf,KAEMC,EAAcC,IAAQC,WACtBC,EAAgBF,IAAQC,WAExBE,EAAe,SAACC,GACpB,MAAwBA,EAAEC,cAAlB/D,EAAR,EAAQA,KAAMgE,EAAd,EAAcA,MACd,OAAQhE,GACN,IAAK,OACHuD,EAAQS,GACR,MACF,IAAK,SACHR,EAAUQ,GACV,MACF,QACE,SAkBAC,EAAQ,WACZV,EAAQ,IACRC,EAAU,KAGZ,OACE,mCACE,uBAAMU,SArBW,SAACJ,GAMpB,GALAA,EAAEK,iBACyBnC,EAASoC,MAClC,SAACzD,GAAD,OAAaA,EAAQX,KAAKA,OAASA,KAInC,OAAOqE,MAAM,GAAD,OAAIrE,EAAJ,4BA9BC,SAACA,EAAMC,GACtBmD,EAASkB,EAAwBtE,EAAMC,IA+BrCiE,CAAS,CAAElE,OAAMC,WACjBgE,KAW8BxB,UAAWC,IAAE6B,KAA3C,UACE,uBAAOC,QAASf,EAAahB,UAAWC,IAAE+B,MAA1C,kBAGA,uBACEC,KAAK,OACL1E,KAAK,OACL2E,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRb,MAAOhE,EACP8E,SAAUjB,EACV1D,GAAIsD,EACJhB,UAAWC,IAAEqC,QAGf,uBAAOP,QAASZ,EAAenB,UAAWC,IAAE+B,MAA5C,oBAGA,uBACEC,KAAK,MACL1E,KAAK,SACL2E,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRb,MAAO/D,EACP6E,SAAUjB,EACV1D,GAAIyD,EACJnB,UAAWC,IAAEqC,QAGf,wBAAQL,KAAK,SAASjC,UAAWC,IAAEsC,IAAnC,+B,iBC5DOC,EAvBK,SAAC,GAA2C,IAAzCjF,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,OAAQE,EAA0B,EAA1BA,GAAI+E,EAAsB,EAAtBA,gBACvC,OACE,+BACE,iCAAOlF,EAAP,QACA,+BAAOC,IACP,wBACEyE,KAAK,SACLS,QAAS,kBAAMD,EAAgB/E,IAC/BsC,UAAWC,IAAE0C,OAHf,wBCDS,SAASC,IACtB,IAAMrD,EAAWmB,YAAYL,GACvBM,EAAWC,cACX/C,EAAgB,SAACH,GAAD,OAAQiD,EAASkC,EAAsBnF,KAE7D,OACE,oBAAIsC,UAAWC,IAAE6C,KAAjB,SACGvD,EAASwD,KAAI,YAAmB,IAAhBrF,EAAe,EAAfA,GAAIH,EAAW,EAAXA,KACnB,OACE,cAAC,EAAD,CACEA,KAAMA,EAAKA,KACXC,OAAQD,EAAKC,OACbiF,gBAAiB5E,EAEjBH,GAAIA,GADCA,Q,qBCMFsF,MArBf,WACE,IAAMzB,EAAQb,YAAYP,GACpBQ,EAAWC,cAEjB,OACE,wBAAOZ,UAAWC,IAAE+B,MAApB,kCAEE,uBACEC,KAAK,OACLV,MAAOA,EACPc,SAPW,SAAChB,GAAD,OAAOV,EAASkC,EAAqBxB,EAAEC,cAAcC,SAQhEvB,UAAWC,IAAEqC,YC0DNW,MApEf,WAyDE,OACE,eAAC,EAAD,WACE,2CACA,cAAC,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAACL,EAAD,Q,QC9DNM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAaC,QAAS,KAAMzD,UAAWA,EAAvC,SACE,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACE,cAAC,EAAD,UAINkE,SAASC,eAAe,U,kBCf1BpG,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,MAAQ,oBAAoB,IAAM,qB","file":"static/js/main.32754067.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contact_list__2hYWF\",\"button\":\"Contact_button__utHzn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__25XVS\",\"input\":\"Filter_input__1XUaQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1YM7z\"};","import { v4 as uuidv4 } from \"uuid\";\r\n// import types from \"./types\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addContact = createAction(\"phonebook/add\", (name, number) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nexport const changeFilter = createAction(\"phonebook/changeFilter\");\r\nexport const deleteContact = createAction(\"phonebook/delete\");\r\n\r\n// const addContact = (name, number) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = (conactId) => ({\r\n//   type: types.DELETE,\r\n//   payload: conactId,\r\n// });\r\n\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n","import { combineReducers } from \"redux\";\r\nimport { addContact, deleteContact, changeFilter } from \"./phonebook-actions\";\r\n// import types from \"./phonebook-types\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\nconst items = createReducer([], {\r\n  [addContact]: (state, { payload }) => [...state, payload],\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [changeFilter]: (state, { payload }) => payload,\r\n});\r\n\r\nconst initialState = combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\nexport default initialState;\r\n\r\n////////////before//////////////\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const initialState = combineReducers({\r\n//   items,\r\n//   filter,\r\n// });\r\n","// import { createStore, combineReducers } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport logger from \"redux-logger\";\r\nimport phonebookReducer from \"./phonebook-reducer\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n// import { getDefaultNormalizer } from \"@testing-library/dom\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst persistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blackList: [\"filter\"],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(persistConfig, phonebookReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import s from \"./Container.module.css\";\r\n\r\nfunction Container({ children }) {\r\n  return <div className={s.container}>{children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","export const getFilter = (state) => state.contacts.filter;\r\nexport const getContacts = (state) => state.contacts.items;\r\n\r\nexport const getVisibleContacts = (state) => {\r\n  const filter = getFilter(state);\r\n  const contacts = getContacts(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter((contact) => {\r\n    // console.log(contact.name.name);\r\n    return contact.name.name.toLowerCase().includes(normalizedFilter);\r\n  });\r\n};\r\n","// import React, { Component } from \"react\";\r\nimport { useState } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport * as phoneActions from \"../../redux/phonebook-actions\";\r\nimport { getContacts } from \"../../redux/phonebook-selectors\";\r\n// import PropTypes from \"prop-types\";\r\nimport s from \"./Form.module.css\";\r\n\r\nfunction Form() {\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (name, number) =>\r\n    dispatch(phoneActions.addContact(name, number));\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const nameInputId = shortid.generate();\r\n  const numberInputId = shortid.generate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const isContactsIncludes = contacts.find(\r\n      (contact) => contact.name.name === name\r\n    );\r\n\r\n    if (isContactsIncludes) {\r\n      return alert(`${name} is alredy in contacts`);\r\n    } else {\r\n      onSubmit({ name, number });\r\n      reset();\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} className={s.form}>\r\n        <label htmlFor={nameInputId} className={s.label}>\r\n          Name\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleChange}\r\n          id={nameInputId}\r\n          className={s.input}\r\n        />\r\n\r\n        <label htmlFor={numberInputId} className={s.label}>\r\n          Number\r\n        </label>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={handleChange}\r\n          id={numberInputId}\r\n          className={s.input}\r\n        />\r\n\r\n        <button type=\"submit\" className={s.btn}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","// import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport s from \"./Contact.module.css\";\r\n\r\nconst ContactItem = ({ name, number, id, onDeleteContact }) => {\r\n  return (\r\n    <li>\r\n      <span>{name}: </span>\r\n      <span>{number}</span>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => onDeleteContact(id)}\r\n        className={s.button}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\n// ContactItem.propTypes = {\r\n//   name: PropTypes.string.isRequired,\r\n//   id: PropTypes.string.isRequired,\r\n//   number: PropTypes.string.isRequired,\r\n//   onDeleteContact: PropTypes.func.isRequired,\r\n// };\r\n\r\nexport default ContactItem;\r\n","// import React, { Component } from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport ContactItem from \"./ContactItem\";\r\nimport s from \"./Contact.module.css\";\r\nimport * as actions from \"../../redux/phonebook-actions\";\r\nimport { getVisibleContacts } from \"../../redux/phonebook-selectors\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nexport default function ContactList() {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  const deleteContact = (id) => dispatch(actions.deleteContact(id));\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(({ id, name }) => {\r\n        return (\r\n          <ContactItem\r\n            name={name.name}\r\n            number={name.number}\r\n            onDeleteContact={deleteContact}\r\n            key={id}\r\n            id={id}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\n// class ContactList extends Component {\r\n//   render() {\r\n//     const contacts = this.props.contacts;\r\n//     const deleteContacts = this.props.onDeleteContact;\r\n//     console.log(contacts);\r\n//     return (\r\n//       <ul>\r\n//         {contacts.map(({ id, name, number }) => (\r\n//           <ContactItem\r\n//             name={name}\r\n//             number={number}\r\n//             onDeleteContact={deleteContacts}\r\n//             key={id}\r\n//             id={id}\r\n//           />\r\n//         ))}\r\n//       </ul>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// ContactList.propTypes = {\r\n//   contacts: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       id: PropTypes.string.isRequired,\r\n//       name: PropTypes.string.isRequired,\r\n//       number: PropTypes.string.isRequired,\r\n//     })\r\n//   ),\r\n//   onDeleteContact: PropTypes.func.isRequired,\r\n// };\r\n\r\n// export default ContactList;\r\n","// import PropTypes from \"prop-types\";\r\nimport s from \"./Filter.module.css\";\r\nimport { getFilter } from \"../../redux/phonebook-selectors\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport * as actions from \"../../redux/phonebook-actions\";\r\n\r\nfunction Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  const onChange = (e) => dispatch(actions.changeFilter(e.currentTarget.value));\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n        className={s.input}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n// Filter.propTypes = {\r\n//   onChange: PropTypes.func.isRequired,\r\n//   value: PropTypes.string.isRequired,\r\n// };\r\n\r\nexport default Filter;\r\n","// import { useState, useEffect } from \"react\";\n// import { v4 as uuidv4 } from \"uuid\";\nimport Container from \"./container/Container\";\nimport Form from \"./form/Form\";\nimport ContactList from \"./contactList/ContactList\";\nimport Filter from \"./filter/Filter\";\n\nfunction App() {\n  // // const [contacts, setContact] = useState(() => {\n  // //   return JSON.parse(window.localStorage.getItem(\"contacts\")) ?? \"\";\n  // // });\n  // const [contacts, setContact] = useState([]);\n\n  // useEffect(() => {\n  //   const contacts = localStorage.getItem(\"contacts\");\n  //   const parsedContacts = JSON.parse(contacts);\n  //   if (parsedContacts) {\n  //     setContact(parsedContacts);\n  //   }\n  // }, []);\n\n  // useEffect(() => {\n  //   window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // const addContact = ({ name, number }) => {\n  //   const newContact = {\n  //     id: uuidv4(),\n  //     name,\n  //     number,\n  //   };\n\n  //   // this.setState(({ contacts }) => {\n  //   if (contacts.some((contact) => contact.name === name)) {\n  //     return alert(`${name} is already in contacts!`);\n  //   }\n\n  //   setContact((prevContacts) => [newContact, ...contacts]);\n  // };\n\n  // // this.setState(({ contacts }) => ({\n  // //   contacts: [newContact, ...contacts],\n  // // }));\n  // const [filter, setFilter] = useState(\"\");\n\n  // const watchFilter = (event) => {\n  //   setFilter(event.currentTarget.value);\n  // };\n\n  // const filterContacts = () => {\n  //   const normalizedFilter = filter.toLowerCase();\n\n  //   return contacts.filter((contact) =>\n  //     contact.name.toLowerCase().includes(normalizedFilter)\n  //   );\n  // };\n\n  // const deleteContact = (id) => {\n  //   setContact((prevContacts) =>\n  //     prevContacts.filter((contact) => contact.id !== id)\n  //   );\n  // };\n\n  // const results = filterContacts();\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <Form />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./redux/store\";\nimport App from \"./components/App\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PersistGate loading={null} persistor={persistor}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </PersistGate>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2Ll75\",\"label\":\"Form_label__2RsuO\",\"input\":\"Form_input__1Ny8m\",\"btn\":\"Form_btn__M5eV7\"};"],"sourceRoot":""}