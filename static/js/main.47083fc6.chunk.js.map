{"version":3,"sources":["components/contactList/Contact.module.css","components/filter/Filter.module.css","components/container/Container.module.css","redux/phonebook-actions.js","redux/phonebook-operations.js","redux/phonebook-reducer.js","redux/store.js","components/container/Container.js","redux/phonebook-selectors.js","components/form/Form.js","components/contactList/ContactItem.js","components/contactList/ContactList.js","components/filter/Filter.js","components/App.js","index.js","components/form/Form.module.css"],"names":["module","exports","changeFilter","createAction","axios","defaults","baseURL","addContact","createAsyncThunk","contact","a","post","data","deleteContact","contactId","delete","id","fetchContacts","get","items","createReducer","fulfilled","state","payload","filter","loading","pending","rejected","initialState","combineReducers","middleware","getDefaultMiddleware","store","configureStore","reducer","contacts","phonebookReducer","devTools","process","Container","children","className","s","container","getFilter","getContacts","getVisibleContacts","normalizedFilter","toLowerCase","console","log","name","includes","Form","useSelector","dispatch","useDispatch","useState","setName","number","setNumber","nameInputId","shortid","generate","numberInputId","handleChange","e","currentTarget","value","reset","onSubmit","preventDefault","find","alert","form","htmlFor","label","type","pattern","title","required","onChange","input","btn","ContactItem","onDeleteContact","onClick","button","ContactList","operations","useEffect","list","map","Filter","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47083fc6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contact_list__2hYWF\",\"button\":\"Contact_button__utHzn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__25XVS\",\"input\":\"Filter_input__1XUaQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1YM7z\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addContact = createAction(\"contacts/addContact\");\r\n\r\nexport const changeFilter = createAction(\"contacts/changeFilter\");\r\n\r\nexport const deleteContact = createAction(\"contacts/deleteContact\");\r\n\r\nexport const fetchContact = createAction(\"contacts/fetchContacts\");\r\n////////////////////////////////////\r\n// const addContact = (name, number) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = (conactId) => ({\r\n//   type: types.DELETE,\r\n//   payload: conactId,\r\n// });\r\n\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n","import axios from \"axios\";\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\naxios.defaults.baseURL = \"https://6192729d57b14a0017c4a0b9.mockapi.io\";\r\n\r\nexport const addContact = createAsyncThunk(\r\n  \"contacts/addContact\",\r\n\r\n  async (contact) => {\r\n    const { data } = await axios.post(\"/contacts\", contact);\r\n    return data;\r\n  }\r\n);\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  \"contacts/deleteContact\",\r\n  async (contactId) => {\r\n    const {\r\n      data: { id },\r\n    } = await axios.delete(`./contacts/${contactId}`);\r\n    return id;\r\n  }\r\n);\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  \"contacts/fetchContacts\",\r\n  async () => {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    return data;\r\n  }\r\n);\r\n\r\n///////////////пример с асинхронной функцией/////////////////\r\n\r\n// export const addContact = (name, number) => async (dispatch) => {\r\n//   const contact = { name, number };\r\n\r\n//   dispatch(addContactRequest());\r\n\r\n//   try {\r\n//     const { data } = await axios.post(\"/contacts\", contact);\r\n//     dispatch(addContactSuccess(data));\r\n//   } catch (error) {\r\n//     dispatch(addContactError(error));\r\n//   }\r\n//////////////////////////////////////////////////\r\n//   axios\r\n//     .post(\"/contacts\", contact)\r\n//     .then(({ data }) => dispatch(addContactSuccess(data)))\r\n//     .catch((error) => dispatch(addContactError(error)));\r\n// };\r\n\r\n// export const deleteContact = (contactId) => (dispatch) => {\r\n//   dispatch(deleteContactRequest());\r\n\r\n//   axios\r\n//     .delete(`./contacts/${contactId}`)\r\n//     .then(() => dispatch(deleteContactSuccess(contactId)))\r\n//     .catch((error) => dispatch(deleteContactError(error)));\r\n// };\r\n","import { combineReducers } from \"redux\";\r\nimport {\r\n  //   deleteContactSuccess,\r\n  //   deleteContactError,\r\n  //   deleteContactRequest,\r\n  changeFilter,\r\n  //   addContactError,\r\n  //   addContactRequest,\r\n  //   addContactSuccess,\r\n  //   fetchContactSuccess,\r\n  //   fetchContactRequest,\r\n  //   fetchContactError,\r\n} from \"./phonebook-actions\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n} from \"./phonebook-operations\";\r\n// import { addContact } from \"./phonebook-operations\";\r\n\r\nconst items = createReducer([], {\r\n  [fetchContacts.fulfilled]: (state, { payload }) => payload,\r\n  [addContact.fulfilled]: (state, { payload }) => [...state, payload],\r\n  [deleteContact.fulfilled]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [changeFilter]: (state, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n\r\n  [deleteContact.pending]: () => true,\r\n  [deleteContact.fulfilled]: () => false,\r\n  [deleteContact.rejected]: () => false,\r\n\r\n  [fetchContacts.pending]: () => true,\r\n  [fetchContacts.fulfilled]: () => false,\r\n  [fetchContacts.rejected]: () => false,\r\n});\r\n\r\nconst initialState = combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n\r\nexport default initialState;\r\n\r\n////////////before//////////////\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const initialState = combineReducers({\r\n//   items,\r\n//   filter,\r\n// });\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\n\r\nimport phonebookReducer from \"./phonebook-reducer\";\r\n\r\n///////// пример прослойки /////////////////\r\n// const myMiddleware = (store) => (next) => (action) => {\r\n//   console.log(\"wewe\", action);\r\n\r\n//   next(action);\r\n// };\r\n//////////////////////////////////////////////\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware(),\r\n  //   serializableCheck: {\r\n  //     ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n  //   },\r\n  // }),\r\n  // // myMiddleware,\r\n  // logger,\r\n];\r\n\r\n// const persistConfig = {\r\n//   key: \"contacts\",\r\n//   storage,\r\n//   blackList: [\"filter\"],\r\n// };\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    // contacts: persistReducer(persistConfig, phonebookReducer),\r\n    contacts: phonebookReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\n// export const persistor = persistStore(store);\r\n","import s from \"./Container.module.css\";\r\n\r\nfunction Container({ children }) {\r\n  return <div className={s.container}>{children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","export const getFilter = (state) => state.contacts.filter;\r\nexport const getContacts = (state) => state.contacts.items;\r\n\r\nexport const getVisibleContacts = (state) => {\r\n  const filter = getFilter(state);\r\n  const contacts = getContacts(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter((contact) => {\r\n    console.log(contact.name);\r\n    return contact.name.toLowerCase().includes(normalizedFilter);\r\n    // return contact.name.toLowerCase().includes(normalizedFilter);\r\n  });\r\n\r\n  // return contacts.filter(\r\n  //   ({ name, number }) =>\r\n  //     name.name.toLowerCase().includes(filter.toLowerCase()) ||\r\n  //     number.includes(filter)\r\n  // );\r\n};\r\n","// import React, { Component } from \"react\";\r\nimport { useState } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addContact } from \"../../redux/phonebook-operations\";\r\nimport { getContacts } from \"../../redux/phonebook-selectors\";\r\n// import PropTypes from \"prop-types\";\r\nimport s from \"./Form.module.css\";\r\n\r\nfunction Form() {\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (name, number) => dispatch(addContact(name, number));\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const nameInputId = shortid.generate();\r\n  const numberInputId = shortid.generate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const isContactsIncludes = contacts.find(\r\n      (contact) => contact.name.name === name\r\n      // (contact) => contact.name === name\r\n    );\r\n\r\n    if (isContactsIncludes) {\r\n      return alert(`${name} is alredy in contacts`);\r\n    } else {\r\n      onSubmit({ name, number });\r\n      reset();\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} className={s.form}>\r\n        <label htmlFor={nameInputId} className={s.label}>\r\n          Name\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleChange}\r\n          id={nameInputId}\r\n          className={s.input}\r\n        />\r\n\r\n        <label htmlFor={numberInputId} className={s.label}>\r\n          Number\r\n        </label>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={handleChange}\r\n          id={numberInputId}\r\n          className={s.input}\r\n        />\r\n\r\n        <button type=\"submit\" className={s.btn}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","// import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport s from \"./Contact.module.css\";\r\n\r\nconst ContactItem = ({ name, number, id, onDeleteContact }) => {\r\n  return (\r\n    <li>\r\n      <span>{name}: </span>\r\n      <span>{number}</span>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => onDeleteContact(id)}\r\n        className={s.button}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\n// ContactItem.propTypes = {\r\n//   name: PropTypes.string.isRequired,\r\n//   id: PropTypes.string.isRequired,\r\n//   number: PropTypes.string.isRequired,\r\n//   onDeleteContact: PropTypes.func.isRequired,\r\n// };\r\n\r\nexport default ContactItem;\r\n","// import React, { Component } from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport ContactItem from \"./ContactItem\";\r\nimport s from \"./Contact.module.css\";\r\nimport { useEffect } from \"react\";\r\n// import * as actions from \"../../redux/phonebook-actions\";\r\nimport * as operations from \"../../redux/phonebook-operations\";\r\nimport { getVisibleContacts } from \"../../redux/phonebook-selectors\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nexport default function ContactList() {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  const deleteContact = (id) => dispatch(operations.deleteContact(id));\r\n\r\n  useEffect(() => {\r\n    dispatch(operations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <ContactItem\r\n            name={name}\r\n            number={number}\r\n            onDeleteContact={deleteContact}\r\n            key={id}\r\n            id={id}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\n// class ContactList extends Component {\r\n//   render() {\r\n//     const contacts = this.props.contacts;\r\n//     const deleteContacts = this.props.onDeleteContact;\r\n//     console.log(contacts);\r\n//     return (\r\n//       <ul>\r\n//         {contacts.map(({ id, name, number }) => (\r\n//           <ContactItem\r\n//             name={name}\r\n//             number={number}\r\n//             onDeleteContact={deleteContacts}\r\n//             key={id}\r\n//             id={id}\r\n//           />\r\n//         ))}\r\n//       </ul>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// ContactList.propTypes = {\r\n//   contacts: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       id: PropTypes.string.isRequired,\r\n//       name: PropTypes.string.isRequired,\r\n//       number: PropTypes.string.isRequired,\r\n//     })\r\n//   ),\r\n//   onDeleteContact: PropTypes.func.isRequired,\r\n// };\r\n\r\n// export default ContactList;\r\n","// import PropTypes from \"prop-types\";\r\nimport s from \"./Filter.module.css\";\r\nimport { getFilter } from \"../../redux/phonebook-selectors\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n// import * as actions from \"../../redux/phonebook-actions\";\r\nimport { changeFilter } from \"../../redux/phonebook-actions\";\r\n\r\nfunction Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  const onChange = ({ target: { value } }) => dispatch(changeFilter(value));\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n        className={s.input}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n// Filter.propTypes = {\r\n//   onChange: PropTypes.func.isRequired,\r\n//   value: PropTypes.string.isRequired,\r\n// };\r\n\r\nexport default Filter;\r\n","// import { useState, useEffect } from \"react\";\n// import { v4 as uuidv4 } from \"uuid\";\nimport Container from \"./container/Container\";\nimport Form from \"./form/Form\";\nimport ContactList from \"./contactList/ContactList\";\nimport Filter from \"./filter/Filter\";\n\nfunction App() {\n  // // const [contacts, setContact] = useState(() => {\n  // //   return JSON.parse(window.localStorage.getItem(\"contacts\")) ?? \"\";\n  // // });\n  // const [contacts, setContact] = useState([]);\n\n  // useEffect(() => {\n  //   const contacts = localStorage.getItem(\"contacts\");\n  //   const parsedContacts = JSON.parse(contacts);\n  //   if (parsedContacts) {\n  //     setContact(parsedContacts);\n  //   }\n  // }, []);\n\n  // useEffect(() => {\n  //   window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // const addContact = ({ name, number }) => {\n  //   const newContact = {\n  //     id: uuidv4(),\n  //     name,\n  //     number,\n  //   };\n\n  //   // this.setState(({ contacts }) => {\n  //   if (contacts.some((contact) => contact.name === name)) {\n  //     return alert(`${name} is already in contacts!`);\n  //   }\n\n  //   setContact((prevContacts) => [newContact, ...contacts]);\n  // };\n\n  // // this.setState(({ contacts }) => ({\n  // //   contacts: [newContact, ...contacts],\n  // // }));\n  // const [filter, setFilter] = useState(\"\");\n\n  // const watchFilter = (event) => {\n  //   setFilter(event.currentTarget.value);\n  // };\n\n  // const filterContacts = () => {\n  //   const normalizedFilter = filter.toLowerCase();\n\n  //   return contacts.filter((contact) =>\n  //     contact.name.toLowerCase().includes(normalizedFilter)\n  //   );\n  // };\n\n  // const deleteContact = (id) => {\n  //   setContact((prevContacts) =>\n  //     prevContacts.filter((contact) => contact.id !== id)\n  //   );\n  // };\n\n  // const results = filterContacts();\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <Form />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport App from \"./components/App\";\n// import { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <PersistGate loading={null} persistor={persistor}> */}\n    <Provider store={store}>\n      <App />\n    </Provider>\n    {/* </PersistGate> */}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2Ll75\",\"label\":\"Form_label__2RsuO\",\"input\":\"Form_input__1Ny8m\",\"btn\":\"Form_btn__M5eV7\"};"],"sourceRoot":""}